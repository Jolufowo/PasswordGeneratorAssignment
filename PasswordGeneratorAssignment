import java.util.Random;
import java.util.Scanner;

/**
 * A simple password generator program that creates a random password
 * based on user-specified criteria such as length and character types.
 */
public class PasswordGenerator {

    public static void main(String[] args) {
        // Initialize the Scanner to read user input from the console
        Scanner scanner = new Scanner(System.in);

        try {
            // Prompt the user for the desired length of the password
            System.out.print("Enter the desired password length: ");
            int passwordLength = scanner.nextInt(); // Read the length as an integer
            scanner.nextLine(); // Consume the leftover newline character

            // Prompt the user to select the types of characters to include in the password
            System.out.println("Choose the types of characters to include in your password:");
            System.out.println("1. Lowercase letters (a-z)");
            System.out.println("2. Uppercase letters (A-Z)");
            System.out.println("3. Numbers (0-9)");
            System.out.println("4. Special characters (!, @, #, etc.)");
            System.out.print("Enter your choices as a comma-separated list (e.g., 1,3,4): ");

            // Read the user's choices as a single line
            String userChoices = scanner.nextLine();

            // Generate the password based on the user's input
            String generatedPassword = generatePassword(passwordLength, userChoices);

            // Display the generated password to the user
            System.out.println("Hereâ€™s your password: " + generatedPassword);
        } catch (Exception e) {
            // Handle any exceptions that may occur during input or password generation
            System.out.println("An error occurred: " + e.getMessage());
        } finally {
            // Close the scanner to free up resources
            scanner.close();
        }
    }

    /**
     * Generates a random password based on the specified length and character options.
     *
     * @param length  The desired length of the password
     * @param options A comma-separated string of options indicating character types to include
     * @return A randomly generated password as a String
     */
    private static String generatePassword(int length, String options) {
        // Define strings containing different types of characters
        String lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
        String uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String numbers = "0123456789";
        String specialCharacters = "!@#$%^&*()_-+=<>?";

        // Use StringBuilder to build the pool of characters to choose from
        StringBuilder characterPool = new StringBuilder();

        // Split the user's options into an array
        String[] choices = options.split(",");

        // Loop through each choice to build the character pool
        for (String choice : choices) {
            switch (choice.trim()) {
                case "1":
                    characterPool.append(lowercaseLetters);
                    break;
                case "2":
                    characterPool.append(uppercaseLetters);
                    break;
                case "3":
                    characterPool.append(numbers);
                    break;
                case "4":
                    characterPool.append(specialCharacters);
                    break;
                default:
                    // If the user enters an invalid option, notify them but continue
                    System.out.println("Invalid option ignored: " + choice);
            }
        }

        // If no valid character types were selected, throw an exception
        if (characterPool.length() == 0) {
            throw new IllegalArgumentException("No valid character options were selected. Please try again.");
        }

        // Create a Random object to generate random indices
        Random random = new Random();

        // Use StringBuilder to construct the password
        StringBuilder password = new StringBuilder();

        // Generate the password by randomly selecting characters from the pool
        for (int i = 0; i < length; i++) {
            // Generate a random index within the bounds of the character pool
            int randomIndex = random.nextInt(characterPool.length());

            // Append the character at the random index to the password
            password.append(characterPool.charAt(randomIndex));
        }

        // Return the generated password as a String
        return password.toString();
    }
}
